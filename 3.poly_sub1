#include <stdio.h>

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MAX_DEGREE 101

typedef struct {
    int degree; // 다항식의 차수
    float coef[MAX_DEGREE]; // 다항식의 계수
} polynomial;

// 다항식의 뺄셈 함수
polynomial poly_subtract(polynomial A, polynomial B) {
    polynomial C; // 결과 다항식
    int Apos = 0, Bpos = 0, Cpos = 0; // 배열 인덱스 변수
    int degree_a = A.degree;
    int degree_b = B.degree;
    C.degree = MAX(A.degree, B.degree); // 결과 다항식의 차수

    // 다항식의 계수를 뺄셈하여 결과 다항식을 생성
    while (Apos <= A.degree && Bpos <= B.degree) {
        if (degree_a > degree_b) { // A항의 차수가 더 큰 경우
            C.coef[Cpos++] = A.coef[Apos++];
            degree_a--;
        }
        else if (degree_a == degree_b) { // A항과 B항의 차수가 같은 경우
            C.coef[Cpos++] = A.coef[Apos++] - B.coef[Bpos++];
            degree_a--;
            degree_b--;
        }
        else { // B항의 차수가 더 큰 경우
            C.coef[Cpos++] = -B.coef[Bpos++];
            degree_b--;
        }
    }

    // 남은 다항식의 항들을 결과 다항식에 추가
    while (Apos <= A.degree) {
        C.coef[Cpos++] = A.coef[Apos++];
    }

    // 결과 다항식의 차수 재조정
    while (C.degree > 0 && C.coef[C.degree] == 0) {
        C.degree--;
    }

    return C;
}

// 다항식 출력 함수
void print_poly(polynomial p) {
    for (int i = p.degree; i > 0; i--) {
        printf("%3.1fx^%d + ", p.coef[p.degree - i], i);
    }
    printf("%3.1f\n", p.coef[p.degree]);
}

int main(void) {
    polynomial a = { 5,{ 3, 6, 0, 0, 0, 10 } };
    polynomial b = { 4,{ 7, 0, 5, 0, 1 } };
    polynomial c;

    
    print_poly(a);
    
    print_poly(b);

    c = poly_subtract(a, b);

    printf("-----------------------------------------------------------------------------\n");
    
    print_poly(c);

    return 0;
}
